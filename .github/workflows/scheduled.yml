name: Scheduled Tasks

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  security-audit:
    name: Daily Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --json > audit-report.json
      continue-on-error: true
    
    - name: Check for critical vulnerabilities
      run: |
        CRITICAL=$(cat audit-report.json | jq '.metadata.vulnerabilities.critical')
        HIGH=$(cat audit-report.json | jq '.metadata.vulnerabilities.high')
        
        if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
          echo "Found critical or high vulnerabilities!"
          exit 1
        fi
    
    - name: Upload audit report
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-${{ github.run_id }}
        path: audit-report.json
    
    - name: Notify on failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        text: 'Security vulnerabilities detected in dependencies!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  dependency-update:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Check for updates
      run: |
        npx npm-check-updates --format json > updates.json
        
        if [ -s updates.json ]; then
          echo "Updates available:"
          cat updates.json
        fi
    
    - name: Create issue for updates
      if: success()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const updates = JSON.parse(fs.readFileSync('updates.json', 'utf8'));
          
          if (Object.keys(updates).length > 0) {
            const body = `
              ## Dependency Updates Available
              
              The following dependencies have newer versions available:
              
              ${Object.entries(updates).map(([pkg, versions]) => 
                `- **${pkg}**: ${versions.current} â†’ ${versions.wanted}`
              ).join('\n')}
              
              Please review and update as appropriate.
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Dependency Updates Available',
              body: body,
              labels: ['dependencies', 'maintenance']
            });
          }

  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
          http://localhost:3000/login
          http://localhost:3000/dashboard
        budgetPath: ./lighthouse-budget.json
        uploadArtifacts: true
        temporaryPublicStorage: true

  backup-test-data:
    name: Backup Test Data
    runs-on: ubuntu-latest
    
    steps:
    - name: Export test data from Supabase
      run: |
        # This would typically use Supabase CLI or API to export data
        echo "Backing up test data..."
        
        # Example: Export using pg_dump (requires connection string)
        # pg_dump ${{ secrets.TEST_DATABASE_URL }} > backup-$(date +%Y%m%d).sql
    
    - name: Upload backup to S3
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl private --follow-symlinks
      env:
        AWS_S3_BUCKET: ${{ secrets.BACKUP_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        SOURCE_DIR: './'
        DEST_DIR: 'backups/'